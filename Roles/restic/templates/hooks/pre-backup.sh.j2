#!/bin/bash
# Pre-Backup Hook for {{ item.name }}
# Generated by Ansible - Customize as needed

set -e

SOURCE_NAME="{{ item.name }}"
SOURCE_PATH="{{ item.path }}"
LOG_TAG="restic-pre-backup-${SOURCE_NAME}"

logger -t "${LOG_TAG}" -p user.info "Executing pre-backup tasks for ${SOURCE_NAME}"

{% if item.pre_backup_commands is defined and item.pre_backup_commands | length > 0 %}
# Custom pre-backup commands
{% for cmd in item.pre_backup_commands %}
logger -t "${LOG_TAG}" -p user.info "Running: {{ cmd }}"
{{ cmd }} || logger -t "${LOG_TAG}" -p user.warning "Command failed (non-fatal): {{ cmd }}"
{% endfor %}
{% else %}
# No pre-backup commands configured
logger -t "${LOG_TAG}" -p user.info "No pre-backup tasks configured"
{% endif %}

{% if item.stop_services is defined and item.stop_services | length > 0 %}
# Stop services before backup
{% for service in item.stop_services %}
logger -t "${LOG_TAG}" -p user.info "Stopping service: {{ service }}"
systemctl stop {{ service }} || logger -t "${LOG_TAG}" -p user.warning "Failed to stop {{ service }}"
{% endfor %}
{% endif %}

{% if item.database_dump is defined and item.database_dump.enabled %}
# Database dump
BACKUP_DIR="/var/backups"
mkdir -p "${BACKUP_DIR}"

{% if item.database_dump.type == 'mysql' %}
logger -t "${LOG_TAG}" -p user.info "Creating MySQL dump"
mysqldump {{ item.database_dump.options | default('--all-databases --single-transaction') }} \
    > "${BACKUP_DIR}/mysql-{{ item.name }}-dump.sql" 2>&1 | logger -t "${LOG_TAG}"
{% elif item.database_dump.type == 'postgresql' %}
logger -t "${LOG_TAG}" -p user.info "Creating PostgreSQL dump"
sudo -u postgres pg_dumpall > "${BACKUP_DIR}/postgres-{{ item.name }}-dump.sql" 2>&1 | logger -t "${LOG_TAG}"
{% endif %}
{% endif %}

logger -t "${LOG_TAG}" -p user.info "Pre-backup tasks completed for ${SOURCE_NAME}"
exit 0
