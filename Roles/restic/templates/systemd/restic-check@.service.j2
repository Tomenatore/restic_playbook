[Unit]
Description=Restic Repository Check Service for %i
After=network-online.target
Wants=network-online.target
Documentation=https://restic.readthedocs.io/

[Service]
Type=oneshot
User=root
Group=root

# Environment
Environment="RESTIC_REPOSITORY={{ restic_repository }}"
Environment="RESTIC_PASSWORD_FILE={{ restic_config_dir }}/passwords/{{ restic_playbook_password_file }}"
{% if restic_backend_type == "s3" %}
Environment="AWS_ACCESS_KEY_ID={{ restic_s3_access_key }}"
Environment="AWS_SECRET_ACCESS_KEY={{ restic_s3_secret_key }}"
Environment="AWS_DEFAULT_REGION={{ restic_s3_region }}"
{% endif %}

# CheckMK Custom Tag
Environment="CHECKMK_TAG=restic_check_%i"

# Restic native lock cleanup (remove stale repository locks)
# Restic's unlock command removes locks older than 30 minutes
ExecStartPre=/bin/bash -c 'restic unlock || true'

# Execute repository check with configurable data verification
{% if restic_check_read_data %}
ExecStart=/usr/bin/restic check --read-data
{% elif restic_check_read_data_subset | length > 0 %}
ExecStart=/usr/bin/restic check --read-data-subset={{ restic_check_read_data_subset }}
{% else %}
ExecStart=/usr/bin/restic check
{% endif %}

# Send CheckMK status
ExecStopPost=/bin/bash {{ restic_scripts_dir }}/checkmk-status.sh %i check $EXIT_STATUS

# Syslog
ExecStopPost=/bin/bash -c ' \
  if [ "$EXIT_STATUS" = "0" ]; then \
    logger -t restic-check -p user.info "Repository check passed for %i"; \
  else \
    logger -t restic-check -p user.err "Repository check failed for %i (exit: $EXIT_STATUS)"; \
  fi'

# Resource limits
CPUQuota={{ restic_cpu_quota }}%
IOWeight={{ restic_io_weight }}
Nice={{ restic_nice_level }}

# Security
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths={{ restic_config_dir }} {{ restic_checkmk_spool_dir }}

[Install]
WantedBy=multi-user.target
