[Unit]
Description=Restic Repository Check Service for %i
After=network-online.target
Wants=network-online.target
Documentation=https://restic.readthedocs.io/

[Service]
Type=oneshot
User=root
Group=root

# Environment
Environment="RESTIC_REPOSITORY={{ restic_repository }}"
Environment="RESTIC_PASSWORD_FILE={{ restic_config_dir }}/passwords/{{ restic_active_password_file }}"
{% if restic_backend_type == "s3" %}
Environment="S3_ACCESS_KEY_ID={{ restic_s3_access_key }}"
Environment="S3_SECRET_ACCESS_KEY={{ restic_s3_secret_key }}"
Environment="S3_DEFAULT_REGION={{ restic_s3_region }}"
{% endif %}

# CheckMK Custom Tag
Environment="CHECKMK_TAG=restic_check_%i"

# Intelligent lock check - only unlock stale locks, let --retry-lock handle fresh locks
{% set lock_max_age = item.lock_max_age_hours | default(restic_lock_max_age_hours) %}
ExecStartPre=/bin/bash -c ' \
  MAX_AGE_SECONDS=$(({{ lock_max_age }} * 3600)); \
  LOCKS=$(restic list locks --no-lock 2>/dev/null || echo ""); \
  \
  if [ -n "$LOCKS" ]; then \
    LOCK_TIME=$(echo "$LOCKS" | head -1 | grep -oP "(?<=at )[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" | head -1); \
    if [ -n "$LOCK_TIME" ]; then \
      LOCK_TS=$(date -d "$LOCK_TIME" +%%s 2>/dev/null || echo 0); \
      if [ $LOCK_TS -gt 0 ]; then \
        CURRENT_TS=$(date +%%s); \
        LOCK_AGE=$((CURRENT_TS - LOCK_TS)); \
        \
        if [ $LOCK_AGE -gt $MAX_AGE_SECONDS ]; then \
          logger -t restic-check -p user.warning "Removing stale lock for %i (age: ${LOCK_AGE}s > ${MAX_AGE_SECONDS}s)"; \
          restic unlock || true; \
        else \
          logger -t restic-check -p user.info "Lock for %i exists (age: ${LOCK_AGE}s), will use --retry-lock to wait"; \
        fi; \
      fi; \
    fi; \
  fi'

# Execute repository check with configurable data verification
{% if restic_check_read_data %}
ExecStart=/usr/bin/restic check --read-data --retry-lock 30s
{% elif restic_check_read_data_subset | length > 0 %}
ExecStart=/usr/bin/restic check --read-data-subset={{ restic_check_read_data_subset }} --retry-lock 30s
{% else %}
ExecStart=/usr/bin/restic check --retry-lock 30s
{% endif %}

# Send CheckMK status
ExecStopPost=/bin/bash {{ restic_scripts_dir }}/checkmk-status.sh %i check $EXIT_STATUS

# Syslog
ExecStopPost=/bin/bash -c ' \
  if [ "$EXIT_STATUS" = "0" ]; then \
    logger -t restic-check -p user.info "Repository check passed for %i"; \
  else \
    logger -t restic-check -p user.err "Repository check failed for %i (exit: $EXIT_STATUS)"; \
  fi'

# Resource limits
CPUQuota={{ restic_cpu_quota }}%
IOWeight={{ restic_io_weight }}
Nice={{ restic_nice_level }}

# Security
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths={{ restic_config_dir }} {{ restic_checkmk_spool_dir }}

[Install]
WantedBy=multi-user.target
