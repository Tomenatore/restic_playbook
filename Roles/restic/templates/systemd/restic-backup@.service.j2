[Unit]
Description=Restic Backup Service for %i
After=network-online.target
Wants=network-online.target
Documentation=https://restic.readthedocs.io/

[Service]
Type=oneshot
User=root
Group=root

# Environment
Environment="RESTIC_REPOSITORY={{ restic_repository }}"
Environment="RESTIC_PASSWORD_FILE={{ restic_config_dir }}/passwords/{{ restic_password_file }}"
{% if restic_backend_type == "s3" %}
Environment="AWS_ACCESS_KEY_ID={{ restic_s3_access_key }}"
Environment="AWS_SECRET_ACCESS_KEY={{ restic_s3_secret_key }}"
Environment="AWS_DEFAULT_REGION={{ restic_s3_region }}"
{% endif %}
Environment="RESTIC_READ_CONCURRENCY={{ restic_read_concurrency }}"
Environment="RESTIC_LIMIT_UPLOAD={{ restic_upload_limit_kbps }}"
Environment="RESTIC_LIMIT_DOWNLOAD={{ restic_download_limit_kbps }}"

# Restic Hooks (native hook system)
# Restic automatically calls these scripts before/after backup
{% set hook_dir = item.hook_script_dir | default(restic_hooks_dir) %}
Environment="RESTIC_PRE_SCRIPT={{ hook_dir }}/pre-backup-%i.sh"
Environment="RESTIC_POST_SCRIPT={{ hook_dir }}/post-backup-%i.sh"

# CheckMK Custom Tag
Environment="CHECKMK_TAG=restic_backup_%i"

# Lock management: Remove stale locks, fail fast on active locks
# This prevents one hanging job from blocking all others
# If lock exists: restic unlock removes it if >30min old, otherwise we fail and retry later
ExecStartPre=/bin/bash -c ' \
  if restic list locks --no-lock 2>/dev/null | grep -q .; then \
    logger -t restic-backup -p user.warning "Repository lock detected for %i, attempting unlock..."; \
    if restic unlock 2>&1 | tee /dev/stderr | grep -q "successfully removed"; then \
      logger -t restic-backup -p user.info "Stale lock removed for %i"; \
    else \
      logger -t restic-backup -p user.warning "Lock still active for %i (age <30min), will retry later"; \
      exit 1; \
    fi; \
  fi'

# Execute backup (restic will call pre/post hooks automatically)
TimeoutStartSec={{ item.timeout_seconds | default(restic_backup_timeout_seconds) }}
ExecStart=/bin/bash {{ restic_scripts_dir }}/restic-backup-%i.sh

{% if restic_enable_checkmk | default(true) | bool %}
# Send CheckMK status
ExecStopPost=/bin/bash {{ restic_scripts_dir }}/restic-checkmk-status.sh %i backup $$EXIT_STATUS
{% endif %}

# Syslog on failure
ExecStopPost=/bin/bash -c 'if [ "$$EXIT_STATUS" != "0" ]; then logger -t restic-backup -p user.err "Backup failed for %i (exit: $$EXIT_STATUS)"; fi'

# Resource limits
CPUQuota={{ restic_cpu_quota }}%
IOWeight={{ restic_io_weight }}
Nice={{ restic_nice_level }}

# Security
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths={{ restic_config_dir }} {{ restic_scripts_dir }} {{ restic_hooks_dir }} {% if restic_enable_checkmk | default(true) | bool %}{{ restic_checkmk_spool_dir }} {% endif %}{% for source in restic_backup_sources %}{{ source.path }} {% endfor %}

# Restart behavior - retry on failure (e.g., locked repository)
Restart=on-failure
RestartSec={{ restic_restart_sec }}
{% if restic_restart_max_attempts > 0 %}
StartLimitBurst={{ restic_restart_max_attempts }}
StartLimitIntervalSec=0
{% endif %}

[Install]
WantedBy=multi-user.target
