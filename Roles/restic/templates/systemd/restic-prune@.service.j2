[Unit]
Description=Restic Prune Service for %i
After=network-online.target
Wants=network-online.target
Documentation=https://restic.readthedocs.io/

[Service]
Type=oneshot
User=root
Group=root

# Environment
Environment="RESTIC_REPOSITORY={{ restic_repository }}"
Environment="RESTIC_PASSWORD_FILE={{ restic_config_dir }}/passwords/{{ restic_password_file }}"
{% if restic_backend_type == "s3" %}
Environment="AWS_ACCESS_KEY_ID={{ restic_s3_access_key }}"
Environment="AWS_SECRET_ACCESS_KEY={{ restic_s3_secret_key }}"
Environment="AWS_DEFAULT_REGION={{ restic_s3_region }}"
{% endif %}

# CheckMK Custom Tag
Environment="CHECKMK_TAG=restic_prune_%i"

# Lock management: Remove stale locks, fail fast on active locks
ExecStartPre=/bin/bash -c ' \
  if restic list locks --no-lock 2>/dev/null | grep -q .; then \
    logger -t restic-prune -p user.warning "Repository lock detected for %i, attempting unlock..."; \
    if restic unlock 2>&1 | tee /dev/stderr | grep -q "successfully removed"; then \
      logger -t restic-prune -p user.info "Stale lock removed for %i"; \
    else \
      logger -t restic-prune -p user.warning "Lock still active for %i (age <30min), will retry later"; \
      exit 1; \
    fi; \
  fi'

# Execute prune with retention policy
ExecStart=/usr/bin/restic forget \
  --keep-last {{ restic_retention_keep_last }} \
  --keep-hourly {{ restic_retention_keep_hourly }} \
  --keep-daily {{ restic_retention_keep_daily }} \
  --keep-weekly {{ restic_retention_keep_weekly }} \
  --keep-monthly {{ restic_retention_keep_monthly }} \
  --keep-yearly {{ restic_retention_keep_yearly }} \
  --prune

{% if restic_enable_checkmk | default(true) | bool %}
# Send CheckMK status
ExecStopPost=/bin/bash {{ restic_scripts_dir }}/restic-checkmk-status.sh %i prune $$EXIT_STATUS
{% endif %}

# Syslog
ExecStopPost=/bin/bash -c ' \
  if [ "$$EXIT_STATUS" = "0" ]; then \
    logger -t restic-prune -p user.info "Prune completed successfully for %i"; \
  else \
    logger -t restic-prune -p user.err "Prune failed for %i (exit: $$EXIT_STATUS)"; \
  fi'

# Resource limits
CPUQuota={{ restic_cpu_quota }}%
IOWeight={{ restic_io_weight }}
Nice={{ restic_nice_level }}

# Security
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths={{ restic_config_dir }} {% if restic_enable_checkmk | default(true) | bool %}{{ restic_checkmk_spool_dir }} {% endif %}{% if restic_backend_type == "local" %}{{ restic_local_path }}{% endif %}

# Restart behavior - retry on failure (e.g., locked repository)
Restart=on-failure
RestartSec={{ restic_restart_sec }}
{% if restic_restart_max_attempts > 0 %}
StartLimitBurst={{ restic_restart_max_attempts }}
StartLimitIntervalSec=0
{% endif %}

[Install]
WantedBy=multi-user.target
