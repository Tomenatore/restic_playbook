#!/usr/bin/env bash
#
# Restic Repository Info & Stats Helper Script
# Deployed by Ansible - Pre-configured with repository credentials
#
# This script provides repository information, statistics, and diagnostic tools
# for administrators without manually setting environment variables.
#
# Usage Examples:
#   ./restic-repo-info.sh status           # Quick repository status
#   ./restic-repo-info.sh stats            # Detailed statistics
#   ./restic-repo-info.sh snapshots        # List snapshots
#   ./restic-repo-info.sh locks            # Check locks
#

set -euo pipefail

# Repository configuration (auto-configured by Ansible)
export RESTIC_REPOSITORY="{{ restic_repository }}"
export RESTIC_PASSWORD_FILE="{{ restic_config_dir }}/passwords/{{ restic_password_file }}"

{% if restic_backend_type == 's3' %}
# S3 backend credentials
export AWS_ACCESS_KEY_ID="{{ restic_s3_access_key }}"
export AWS_SECRET_ACCESS_KEY="{{ restic_s3_secret_key }}"
export AWS_DEFAULT_REGION="{{ restic_s3_region }}"
{% endif %}

{% raw %}
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
{% endraw %}

# Helper functions
print_header() {
    echo -e "\n${CYAN}==========================================================${NC}"
    echo -e "${CYAN}  $1${NC}"
    echo -e "${CYAN}==========================================================${NC}\n"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_usage() {
    cat << EOF
${GREEN}Restic Repository Info & Statistics${NC}

${YELLOW}Repository:${NC} $RESTIC_REPOSITORY

${YELLOW}Available Commands:${NC}

  ${BLUE}status${NC}              Quick repository status overview
  ${BLUE}stats${NC}               Detailed repository statistics
  ${BLUE}stats-raw${NC}           Raw storage statistics (actual disk usage)
  ${BLUE}stats-restore${NC}       Restore size statistics (uncompressed size)

  ${BLUE}snapshots${NC}           List all snapshots
  ${BLUE}snapshots-latest${NC}    Show only latest snapshots per host/path
  ${BLUE}snapshots-json${NC}      List snapshots in JSON format

  ${BLUE}locks${NC}               Show current repository locks
  ${BLUE}unlock${NC}              Remove stale locks (older than 30 minutes)

  ${BLUE}check${NC}               Check repository integrity (quick)
  ${BLUE}check-data${NC}          Check repository data integrity (slow, reads all data)

  ${BLUE}prune-dry${NC}           Dry-run prune (show what would be deleted)
  ${BLUE}size${NC}                Calculate repository size by snapshot

  ${BLUE}cache-clear${NC}         Clear local restic cache

  ${BLUE}debug${NC}               Show environment variables and configuration

${YELLOW}Examples:${NC}

  # Quick status check
  $0 status

  # Detailed statistics
  $0 stats

  # Check for locks
  $0 locks

  # Repository integrity check
  $0 check

  # See what prune would delete
  $0 prune-dry

EOF
}

# Format bytes to human readable
format_bytes() {
    local bytes=$1
    if [ "$bytes" -lt 1024 ]; then
        echo "${bytes}B"
    elif [ "$bytes" -lt 1048576 ]; then
        echo "$(awk "BEGIN {printf \"%.2f\", $bytes/1024}")KB"
    elif [ "$bytes" -lt 1073741824 ]; then
        echo "$(awk "BEGIN {printf \"%.2f\", $bytes/1048576}")MB"
    else
        echo "$(awk "BEGIN {printf \"%.2f\", $bytes/1073741824}")GB"
    fi
}

# Command handlers
cmd_status() {
    print_header "Repository Status"

    print_info "Repository: $RESTIC_REPOSITORY"
    echo ""

    # Check if repository is accessible
    if ! restic snapshots --quiet &>/dev/null; then
        print_error "Cannot access repository! Check credentials and connectivity."
        exit 1
    fi

    print_success "Repository is accessible"
    echo ""

    # Snapshot count
    local snapshot_count=$(restic snapshots --json | jq '. | length')
    print_info "Total snapshots: ${GREEN}$snapshot_count${NC}"

    # Latest snapshot
    local latest_snapshot=$(restic snapshots --last --json 2>/dev/null | jq -r '.[0] | "\(.time) - \(.hostname):\(.paths[0])"' 2>/dev/null || echo "No snapshots")
    print_info "Latest snapshot: ${GREEN}$latest_snapshot${NC}"

    # Check for locks
    local lock_count=$(restic list locks --no-lock 2>/dev/null | wc -l)
    if [ "$lock_count" -gt 0 ]; then
        print_warning "Active locks: ${YELLOW}$lock_count${NC}"
    else
        print_success "No active locks"
    fi

    echo ""

    # Quick stats
    print_info "Fetching statistics..."
    restic stats --mode restore-size 2>/dev/null || print_warning "Could not fetch statistics"
}

cmd_stats() {
    print_header "Repository Statistics"

    print_info "Calculating detailed statistics (this may take a moment)..."
    echo ""

    # Restore size (uncompressed)
    print_info "${CYAN}Restore Size (uncompressed data):${NC}"
    restic stats --mode restore-size

    echo ""

    # Raw data (actual storage)
    print_info "${CYAN}Raw Data (actual storage used):${NC}"
    restic stats --mode raw-data
}

cmd_stats_raw() {
    print_header "Raw Storage Statistics"
    print_info "Actual disk usage after compression and deduplication..."
    echo ""
    restic stats --mode raw-data
}

cmd_stats_restore() {
    print_header "Restore Size Statistics"
    print_info "Total size of data if fully restored (uncompressed)..."
    echo ""
    restic stats --mode restore-size
}

cmd_snapshots() {
    print_header "All Snapshots"
    restic snapshots
}

cmd_snapshots_latest() {
    print_header "Latest Snapshots"
    restic snapshots --latest 1 --group-by host,paths
}

cmd_snapshots_json() {
    print_header "Snapshots (JSON)"
    restic snapshots --json | jq '.'
}

cmd_locks() {
    print_header "Repository Locks"

    local locks=$(restic list locks --no-lock 2>/dev/null)

    if [ -z "$locks" ]; then
        print_success "No locks found - repository is free"
    else
        print_warning "Active locks found:"
        echo "$locks"
        echo ""
        print_info "To remove stale locks (>30 min): $0 unlock"
    fi
}

cmd_unlock() {
    print_header "Remove Stale Locks"

    print_info "Removing locks older than 30 minutes..."

    if restic unlock; then
        print_success "Stale locks removed successfully!"
    else
        print_info "No stale locks found or unlock failed"
    fi
}

cmd_check() {
    print_header "Repository Integrity Check"

    print_info "Checking repository structure and metadata..."
    print_warning "This does NOT read actual data files (use check-data for that)"
    echo ""

    if restic check; then
        print_success "Repository check passed - no errors found!"
    else
        print_error "Repository check failed! See errors above."
        exit 1
    fi
}

cmd_check_data() {
    print_header "Repository Data Integrity Check"

    print_warning "This will READ ALL DATA in the repository!"
    print_warning "This operation can take a VERY LONG TIME and use significant bandwidth!"
    echo ""
    read -p "Are you sure you want to continue? (yes/no): " confirm

    if [ "$confirm" != "yes" ]; then
        print_info "Check cancelled."
        exit 0
    fi

    echo ""
    print_info "Checking repository data integrity..."

    if restic check --read-data; then
        print_success "Data integrity check passed - no errors found!"
    else
        print_error "Data integrity check failed! See errors above."
        exit 1
    fi
}

cmd_prune_dry() {
    print_header "Prune Dry Run"

    print_info "Simulating prune operation (no actual deletion)..."
    print_info "This shows what WOULD be removed based on retention policy"
    echo ""

    restic forget --prune --dry-run \
        --keep-last {{ restic_retention_keep_last }} \
        --keep-daily {{ restic_retention_keep_daily }} \
        --keep-weekly {{ restic_retention_keep_weekly }} \
        --keep-monthly {{ restic_retention_keep_monthly }} \
        --keep-yearly {{ restic_retention_keep_yearly }}

    echo ""
    print_warning "This was a DRY RUN - nothing was actually deleted!"
}

cmd_size() {
    print_header "Repository Size by Snapshot"

    print_info "Calculating size for each snapshot..."
    echo ""

    restic snapshots --json | jq -r '.[] | "\(.time) \(.id[0:8]) \(.hostname):\(.paths[0])"' | while read -r line; do
        snapshot_id=$(echo "$line" | awk '{print $2}')
        size=$(restic stats "$snapshot_id" --mode restore-size --json 2>/dev/null | jq -r '.total_size' || echo "0")
        size_human=$(format_bytes "$size")
        echo "$line - $size_human"
    done
}

cmd_cache_clear() {
    print_header "Clear Local Cache"

    print_warning "This will clear the local restic cache"
    print_info "Cache location: ~/.cache/restic/"
    echo ""

    local cache_size=$(du -sh ~/.cache/restic/ 2>/dev/null | cut -f1 || echo "unknown")
    print_info "Current cache size: $cache_size"
    echo ""

    read -p "Clear cache? (yes/no): " confirm

    if [ "$confirm" != "yes" ]; then
        print_info "Cache clear cancelled."
        exit 0
    fi

    rm -rf ~/.cache/restic/
    print_success "Cache cleared successfully!"
}

cmd_debug() {
    print_header "Debug Information"

    echo -e "${YELLOW}Environment Variables:${NC}"
    echo "RESTIC_REPOSITORY=$RESTIC_REPOSITORY"
    echo "RESTIC_PASSWORD_FILE=$RESTIC_PASSWORD_FILE"
{% if restic_backend_type == 's3' %}
    echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
    echo "AWS_SECRET_ACCESS_KEY=***hidden***"
    echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
{% endif %}
    echo ""

    echo -e "${YELLOW}Restic Version:${NC}"
    restic version
    echo ""

    echo -e "${YELLOW}Repository Config:${NC}"
    restic cat config 2>/dev/null | jq '.' || print_warning "Could not read repository config"
    echo ""

    echo -e "${YELLOW}Password File Status:${NC}"
    if [ -f "$RESTIC_PASSWORD_FILE" ]; then
        print_success "Password file exists: $RESTIC_PASSWORD_FILE"
        ls -lh "$RESTIC_PASSWORD_FILE"
    else
        print_error "Password file NOT found: $RESTIC_PASSWORD_FILE"
    fi
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 0
    fi

    local command="$1"
    shift

    case "$command" in
        status)
            cmd_status "$@"
            ;;
        stats)
            cmd_stats "$@"
            ;;
        stats-raw)
            cmd_stats_raw "$@"
            ;;
        stats-restore)
            cmd_stats_restore "$@"
            ;;
        snapshots)
            cmd_snapshots "$@"
            ;;
        snapshots-latest)
            cmd_snapshots_latest "$@"
            ;;
        snapshots-json)
            cmd_snapshots_json "$@"
            ;;
        locks)
            cmd_locks "$@"
            ;;
        unlock)
            cmd_unlock "$@"
            ;;
        check)
            cmd_check "$@"
            ;;
        check-data)
            cmd_check_data "$@"
            ;;
        prune-dry)
            cmd_prune_dry "$@"
            ;;
        size)
            cmd_size "$@"
            ;;
        cache-clear)
            cmd_cache_clear "$@"
            ;;
        debug)
            cmd_debug "$@"
            ;;
        help|-h|--help)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
