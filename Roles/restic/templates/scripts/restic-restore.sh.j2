#!/usr/bin/env bash
#
# Restic Restore Helper Script
# Deployed by Ansible - Pre-configured with repository credentials
#
# This script provides an easy interface for administrators to restore files
# from the Restic repository without manually setting environment variables.
#
# Usage Examples:
#   ./restic-restore.sh list                           # List all snapshots
#   ./restic-restore.sh list-files <snapshot-id>       # List files in snapshot
#   ./restic-restore.sh latest /tmp/restore            # Restore latest to /tmp/restore
#   ./restic-restore.sh <snapshot-id> /tmp/restore     # Restore specific snapshot
#   ./restic-restore.sh find "*.conf"                  # Find files across snapshots
#   ./restic-restore.sh mount /mnt/restic              # Mount all snapshots (FUSE)
#

set -euo pipefail

# Repository configuration (auto-configured by Ansible)
export RESTIC_REPOSITORY="{{ restic_repository }}"
export RESTIC_PASSWORD_FILE="{{ restic_config_dir }}/passwords/{{ restic_password_file }}"

{% if restic_backend_type == 's3' %}
# S3 backend credentials
export AWS_ACCESS_KEY_ID="{{ restic_s3_access_key }}"
export AWS_SECRET_ACCESS_KEY="{{ restic_s3_secret_key }}"
export AWS_DEFAULT_REGION="{{ restic_s3_region }}"
{% endif %}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_usage() {
    cat << EOF
${GREEN}Restic Restore Helper${NC}

${YELLOW}Repository:${NC} $RESTIC_REPOSITORY

${YELLOW}Available Commands:${NC}

  ${BLUE}list${NC}                                  List all available snapshots
  ${BLUE}list-tag${NC} <tag>                        List snapshots with specific tag
  ${BLUE}list-files${NC} <snapshot-id|latest>       List files in a snapshot
  ${BLUE}find${NC} <pattern>                        Find files across all snapshots (e.g., "*.conf")
  ${BLUE}diff${NC} <snapshot1> <snapshot2>          Show differences between snapshots

  ${BLUE}restore${NC} <snapshot-id|latest> <target-dir>
                                         Restore entire snapshot to target directory

  ${BLUE}restore-file${NC} <snapshot-id|latest> <target-dir> <file-path>
                                         Restore specific file from snapshot

  ${BLUE}restore-verify${NC} <snapshot-id|latest> <target-dir>
                                         Restore with verification

  ${BLUE}mount${NC} <mount-point>                   Mount all snapshots as FUSE filesystem
  ${BLUE}umount${NC} <mount-point>                  Unmount FUSE filesystem

  ${BLUE}check${NC}                                 Check repository integrity
  ${BLUE}unlock${NC}                                Remove stale locks (>30 minutes)

${YELLOW}Examples:${NC}

  # List all snapshots
  $0 list

  # List snapshots for a specific tag
  $0 list-tag var-www

  # Find all nginx config files
  $0 find "nginx.conf"

  # Restore latest snapshot
  $0 restore latest /tmp/restore

  # Restore specific snapshot
  $0 restore abc123de /tmp/restore

  # Restore single file
  $0 restore-file latest /tmp "etc/nginx/nginx.conf"

  # Mount repository for browsing
  $0 mount /mnt/restic-mount
  # Browse: ls /mnt/restic-mount/snapshots/latest/
  $0 umount /mnt/restic-mount

EOF
}

# Command handlers
cmd_list() {
    print_info "Listing all snapshots..."
    restic snapshots "$@"
}

cmd_list_tag() {
    if [ $# -lt 1 ]; then
        print_error "Missing tag argument"
        echo "Usage: $0 list-tag <tag>"
        exit 1
    fi
    print_info "Listing snapshots with tag '$1'..."
    restic snapshots --tag "$1"
}

cmd_list_files() {
    if [ $# -lt 1 ]; then
        print_error "Missing snapshot ID"
        echo "Usage: $0 list-files <snapshot-id|latest>"
        exit 1
    fi
    print_info "Listing files in snapshot '$1'..."
    restic ls "$1"
}

cmd_find() {
    if [ $# -lt 1 ]; then
        print_error "Missing search pattern"
        echo "Usage: $0 find <pattern>"
        exit 1
    fi
    print_info "Finding files matching '$1'..."
    restic find "$1"
}

cmd_diff() {
    if [ $# -lt 2 ]; then
        print_error "Missing snapshot IDs"
        echo "Usage: $0 diff <snapshot1> <snapshot2>"
        exit 1
    fi
    print_info "Comparing snapshots '$1' and '$2'..."
    restic diff "$1" "$2"
}

cmd_restore() {
    if [ $# -lt 2 ]; then
        print_error "Missing arguments"
        echo "Usage: $0 restore <snapshot-id|latest> <target-dir>"
        exit 1
    fi

    local snapshot="$1"
    local target="$2"

    if [ ! -d "$target" ]; then
        print_warning "Target directory '$target' does not exist. Creating..."
        mkdir -p "$target"
    fi

    print_info "Restoring snapshot '$snapshot' to '$target'..."
    print_warning "This may take a while depending on backup size..."

    if restic restore "$snapshot" --target "$target"; then
        print_success "Restore completed successfully!"
        print_info "Files restored to: $target"
    else
        print_error "Restore failed!"
        exit 1
    fi
}

cmd_restore_file() {
    if [ $# -lt 3 ]; then
        print_error "Missing arguments"
        echo "Usage: $0 restore-file <snapshot-id|latest> <target-dir> <file-path>"
        exit 1
    fi

    local snapshot="$1"
    local target="$2"
    local filepath="$3"

    if [ ! -d "$target" ]; then
        print_warning "Target directory '$target' does not exist. Creating..."
        mkdir -p "$target"
    fi

    print_info "Restoring file '$filepath' from snapshot '$snapshot' to '$target'..."

    if restic restore "$snapshot" --target "$target" --include "/$filepath"; then
        print_success "File restored successfully!"
        print_info "File location: $target/$filepath"
    else
        print_error "Restore failed!"
        exit 1
    fi
}

cmd_restore_verify() {
    if [ $# -lt 2 ]; then
        print_error "Missing arguments"
        echo "Usage: $0 restore-verify <snapshot-id|latest> <target-dir>"
        exit 1
    fi

    local snapshot="$1"
    local target="$2"

    if [ ! -d "$target" ]; then
        print_warning "Target directory '$target' does not exist. Creating..."
        mkdir -p "$target"
    fi

    print_info "Restoring snapshot '$snapshot' to '$target' with verification..."
    print_warning "Verification enabled - this will take longer..."

    if restic restore "$snapshot" --target "$target" --verify; then
        print_success "Restore and verification completed successfully!"
        print_info "Files restored to: $target"
    else
        print_error "Restore or verification failed!"
        exit 1
    fi
}

cmd_mount() {
    if [ $# -lt 1 ]; then
        print_error "Missing mount point"
        echo "Usage: $0 mount <mount-point>"
        exit 1
    fi

    local mountpoint="$1"

    if [ ! -d "$mountpoint" ]; then
        print_warning "Mount point '$mountpoint' does not exist. Creating..."
        mkdir -p "$mountpoint"
    fi

    if mountpoint -q "$mountpoint"; then
        print_error "Mount point '$mountpoint' is already mounted!"
        exit 1
    fi

    print_info "Mounting repository to '$mountpoint'..."
    print_info "Repository will be mounted in the background."
    print_info "To browse: cd $mountpoint/snapshots/"
    print_info "To unmount: $0 umount $mountpoint"

    restic mount "$mountpoint" &
    local mount_pid=$!

    sleep 2
    if mountpoint -q "$mountpoint"; then
        print_success "Repository mounted successfully!"
        print_info "PID: $mount_pid"
        print_info "Browse: ls $mountpoint/snapshots/"
    else
        print_error "Mount failed!"
        exit 1
    fi
}

cmd_umount() {
    if [ $# -lt 1 ]; then
        print_error "Missing mount point"
        echo "Usage: $0 umount <mount-point>"
        exit 1
    fi

    local mountpoint="$1"

    if ! mountpoint -q "$mountpoint"; then
        print_warning "Mount point '$mountpoint' is not mounted."
        exit 0
    fi

    print_info "Unmounting '$mountpoint'..."

    if fusermount -u "$mountpoint"; then
        print_success "Unmounted successfully!"
    else
        print_error "Unmount failed! Try: fusermount -uz $mountpoint"
        exit 1
    fi
}

cmd_check() {
    print_info "Checking repository integrity..."
    print_warning "This may take a while..."

    if restic check; then
        print_success "Repository check completed - no errors found!"
    else
        print_error "Repository check failed!"
        exit 1
    fi
}

cmd_unlock() {
    print_info "Removing stale locks (older than 30 minutes)..."

    if restic unlock; then
        print_success "Locks removed successfully!"
    else
        print_warning "No stale locks found or unlock failed."
    fi
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 0
    fi

    local command="$1"
    shift

    case "$command" in
        list)
            cmd_list "$@"
            ;;
        list-tag)
            cmd_list_tag "$@"
            ;;
        list-files)
            cmd_list_files "$@"
            ;;
        find)
            cmd_find "$@"
            ;;
        diff)
            cmd_diff "$@"
            ;;
        restore)
            cmd_restore "$@"
            ;;
        restore-file)
            cmd_restore_file "$@"
            ;;
        restore-verify)
            cmd_restore_verify "$@"
            ;;
        mount)
            cmd_mount "$@"
            ;;
        umount|unmount)
            cmd_umount "$@"
            ;;
        check)
            cmd_check "$@"
            ;;
        unlock)
            cmd_unlock "$@"
            ;;
        help|-h|--help)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
