#!/bin/bash
# CheckMK Status Reporter for Restic
# Generated by Ansible - DO NOT EDIT MANUALLY

set -e

# Parameters
SOURCE_NAME="$1"
JOB_TYPE="$2"
EXIT_STATUS="${3:-0}"

# Configuration
SPOOL_DIR="{{ restic_checkmk_spool_dir }}"
TIMESTAMP=$(date +%s)
SERVICE_NAME="Restic_${JOB_TYPE}_${SOURCE_NAME}"

# CheckMK status codes
# 0 = OK, 1 = WARNING, 2 = CRITICAL, 3 = UNKNOWN

# Determine status
if [ "${EXIT_STATUS}" = "0" ]; then
    STATUS=0
    STATUS_TEXT="OK"
    MESSAGE="${JOB_TYPE} completed successfully for ${SOURCE_NAME}"
else
    STATUS=2
    STATUS_TEXT="CRITICAL"
    MESSAGE="${JOB_TYPE} FAILED for ${SOURCE_NAME} (exit: ${EXIT_STATUS})"
fi

# Additional metrics based on job type
METRICS=""
case "${JOB_TYPE}" in
    backup)
        STATS_FILE="{{ restic_config_dir }}/stats-${SOURCE_NAME}.json"
        if [ -f "${STATS_FILE}" ]; then
            TOTAL_SIZE=$(jq -r '.total_size // 0' "${STATS_FILE}")
            TOTAL_FILES=$(jq -r '.total_file_count // 0' "${STATS_FILE}")
            METRICS=" | size=${TOTAL_SIZE}B files=${TOTAL_FILES}"
        fi
        ;;
    scan)
        STATS_FILE="{{ restic_config_dir }}/stats-${SOURCE_NAME}.json"
        if [ -f "${STATS_FILE}" ]; then
            TOTAL_SIZE=$(jq -r '.total_size // 0' "${STATS_FILE}")
            TOTAL_FILES=$(jq -r '.total_file_count // 0' "${STATS_FILE}")
            METRICS=" | size=${TOTAL_SIZE}B files=${TOTAL_FILES}"
        fi
        ;;
esac

# Write to CheckMK spool
SPOOL_FILE="${SPOOL_DIR}/${TIMESTAMP}_${SERVICE_NAME}"
echo "${STATUS} ${SERVICE_NAME} ${METRICS} ${MESSAGE}" > "${SPOOL_FILE}"

# Cleanup old spool files for this service (older than 2 hours)
find "${SPOOL_DIR}" -name "*_${SERVICE_NAME}" -type f -mmin +120 -delete 2>/dev/null || true

exit 0
