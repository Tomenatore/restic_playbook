#!/bin/bash
# Restic Backup Script for {{ item.name }}
# Generated by Ansible - DO NOT EDIT MANUALLY

set -e
set -o pipefail

# Source configuration
SOURCE_NAME="{{ item.name }}"
SOURCE_PATH="{{ item.path }}"
SOURCE_TAGS="{{ item.tags | join(' ') }}"
EXCLUDE_FILE="{{ restic_config_dir }}/excludes.txt"

# Logging
LOG_TAG="restic-backup-${SOURCE_NAME}"

# Check if source exists
if [ ! -d "${SOURCE_PATH}" ] && [ ! -f "${SOURCE_PATH}" ]; then
    logger -t "${LOG_TAG}" -p user.error "Source path does not exist: ${SOURCE_PATH}"
    exit 1
fi

# Log start
logger -t "${LOG_TAG}" -p user.info "Starting backup for ${SOURCE_NAME}"

# Build restic command
RESTIC_CMD="restic backup ${SOURCE_PATH}"

# Add exclusions
if [ -f "${EXCLUDE_FILE}" ]; then
    RESTIC_CMD="${RESTIC_CMD} --exclude-file=${EXCLUDE_FILE}"
fi

# Add tags
for TAG in ${SOURCE_TAGS}; do
    RESTIC_CMD="${RESTIC_CMD} --tag ${TAG}"
done
RESTIC_CMD="${RESTIC_CMD} --tag auto --tag ${SOURCE_NAME}"

# Add force rescan if configured
{% if restic_force_rescan %}
RESTIC_CMD="${RESTIC_CMD} --force"
{% endif %}

# Check force rescan day
{% if restic_force_rescan_day > 0 %}
CURRENT_DAY=$(date +%d)
if [ "${CURRENT_DAY}" = "{{ restic_force_rescan_day }}" ]; then
    RESTIC_CMD="${RESTIC_CMD} --force"
    logger -t "${LOG_TAG}" -p user.info "Force rescan enabled (day ${CURRENT_DAY})"
fi
{% endif %}

# Add bandwidth limits
{% if restic_upload_limit_kbps > 0 %}
RESTIC_CMD="${RESTIC_CMD} --limit-upload {{ restic_upload_limit_kbps }}"
{% endif %}
{% if restic_download_limit_kbps > 0 %}
RESTIC_CMD="${RESTIC_CMD} --limit-download {{ restic_download_limit_kbps }}"
{% endif %}

# Add retry lock (wait if repository is locked)
{% set retry_lock = item.retry_lock_duration | default(restic_retry_lock_duration) %}
{% if retry_lock | length > 0 %}
RESTIC_CMD="${RESTIC_CMD} --retry-lock {{ retry_lock }}"
{% endif %}

# Add JSON output
RESTIC_CMD="${RESTIC_CMD} --json"

# Execute backup
logger -t "${LOG_TAG}" -p user.info "Executing: ${RESTIC_CMD}"

if ${RESTIC_CMD} 2>&1 | logger -t "${LOG_TAG}" -p user.info; then
    logger -t "${LOG_TAG}" -p user.info "Backup completed successfully for ${SOURCE_NAME}"
    exit 0
else
    EXIT_CODE=$?
    if [ ${EXIT_CODE} -eq 3 ]; then
        logger -t "${LOG_TAG}" -p user.warning "Backup completed with warnings (incomplete snapshot) for ${SOURCE_NAME}"
        exit 0
    else
        logger -t "${LOG_TAG}" -p user.error "Backup failed for ${SOURCE_NAME} with exit code ${EXIT_CODE}"
        exit ${EXIT_CODE}
    fi
fi
