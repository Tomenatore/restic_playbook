---
# roles/restic/tasks/systemd_units.yml
# Deploy and manage systemd service and timer units

# ========================================
# DEPLOY SYSTEMD UNITS
# ========================================

- name: "Deploy systemd units for {{ unit_config.unit }}"
  loop:
    - { unit: "backup", enabled: "{{ restic_enable_backup }}" }
    - { unit: "prune", enabled: "{{ restic_enable_prune }}" }
    - { unit: "check", enabled: "{{ restic_enable_check }}" }
    - { unit: "scan", enabled: "{{ restic_enable_scan }}" }
  loop_control:
    loop_var: unit_config
    label: "{{ unit_config.unit }}"
  when: unit_config.enabled | bool
  block:
    - name: "Deploy {{ unit_config.unit }} service unit"
      ansible.builtin.template:
        src: "systemd/restic-{{ unit_config.unit }}@.service.j2"
        dest: "/etc/systemd/system/restic-{{ unit_config.unit }}@.service"
        mode: '0644'
        owner: root
        group: root
      notify: systemd daemon-reload

    - name: "Deploy {{ unit_config.unit }} timer unit"
      ansible.builtin.template:
        src: "systemd/restic-{{ unit_config.unit }}@.timer.j2"
        dest: "/etc/systemd/system/restic-{{ unit_config.unit }}@.timer"
        mode: '0644'
        owner: root
        group: root
      when: restic_enable_timers | bool
      notify: systemd daemon-reload

# ========================================
# ENABLE AND START TIMERS
# ========================================

- name: Flush handlers to reload systemd
  ansible.builtin.meta: flush_handlers

- name: "Enable and start {{ unit_config.unit }} timers"
  loop:
    - unit: "backup"
      enabled: "{{ restic_enable_backup }}"
      sources: "{{ restic_backup_sources | selectattr('enabled') | list }}"
    - unit: "prune"
      enabled: "{{ restic_enable_prune }}"
      sources: "{{ [restic_backup_sources | selectattr('enabled') | list | first] if (restic_backup_sources | selectattr('enabled') | list | length) > 0 else [] }}"
    - unit: "check"
      enabled: "{{ restic_enable_check }}"
      sources: "{{ [restic_backup_sources | selectattr('enabled') | list | first] if (restic_backup_sources | selectattr('enabled') | list | length) > 0 else [] }}"
    - unit: "scan"
      enabled: "{{ restic_enable_scan }}"
      sources: "{{ [restic_backup_sources | selectattr('enabled') | list | first] if (restic_backup_sources | selectattr('enabled') | list | length) > 0 else [] }}"
  loop_control:
    loop_var: unit_config
    label: "{{ unit_config.unit }}"
  when:
    - unit_config.enabled | bool
    - restic_enable_timers | bool
    - unit_config.sources | length > 0
  block:
    - name: "Enable and start restic-{{ unit_config.unit }} timer for each source"
      ansible.builtin.systemd:
        name: "restic-{{ unit_config.unit }}@{{ item.name }}.timer"
        enabled: yes
        state: started
        daemon_reload: yes
      loop: "{{ unit_config.sources }}"
      loop_control:
        label: "{{ unit_config.unit }}@{{ item.name }}"

# ========================================
# SUMMARY
# ========================================

- name: Display deployment summary
  ansible.builtin.debug:
    msg:
      - "=== Restic Systemd Deployment Complete ==="
      - "Repository: {{ restic_repository }}"
      - "Backend: {{ restic_backend_type | upper }}"
      - "Backup sources: {{ restic_backup_sources | selectattr('enabled') | list | length }}"
      - "Enabled jobs: backup={{ restic_enable_backup }}, prune={{ restic_enable_prune }}, check={{ restic_enable_check }}, scan={{ restic_enable_scan }}"
      - "Timers enabled: {{ restic_enable_timers }}"
      - ""
      - "Check timer status with: systemctl list-timers 'restic-*'"
      - "View logs with: journalctl -u 'restic-*' -f"
