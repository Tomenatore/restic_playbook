---
# roles/restic/tasks/scripts_and_hooks.yml
# Deploy backup scripts, helper scripts, and pre/post backup hooks

# ========================================
# BACKUP AND MONITORING SCRIPTS
# ========================================

- name: Deploy CheckMK status script
  ansible.builtin.template:
    src: scripts/checkmk-status.sh.j2
    dest: "{{ restic_scripts_dir }}/checkmk-status.sh"
    mode: '0755'
    owner: root
    group: root

- name: Deploy backup and scan scripts for each source
  ansible.builtin.template:
    src: "scripts/{{ item.1 }}.sh.j2"
    dest: "{{ restic_scripts_dir }}/{{ item.1 }}-{{ item.0.name }}.sh"
    mode: '0755'
    owner: root
    group: root
  loop: "{{ restic_backup_sources | selectattr('enabled') | list | product(['backup', 'scan']) }}"
  loop_control:
    label: "{{ item.1 }}-{{ item.0.name }}"

# ========================================
# HELPER SCRIPTS
# ========================================

- name: Create helper scripts directory
  ansible.builtin.file:
    path: "{{ restic_helpers_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Deploy helper scripts
  ansible.builtin.template:
    src: "scripts/{{ item }}.sh.j2"
    dest: "{{ restic_helpers_dir }}/{{ item }}.sh"
    mode: '0755'
    owner: root
    group: root
  loop:
    - restic-restore
    - restic-repo-info
  loop_control:
    label: "{{ item }}"

# ========================================
# PRE/POST BACKUP HOOKS
# ========================================
#
# Hooks use Restic's native hook system (RESTIC_PRE_SCRIPT, RESTIC_POST_SCRIPT)
#
# Option 1: Global hooks directory (restic_custom_hooks_dir)
#   - Copies hooks from control node: pre-backup-<source>.sh, post-backup-<source>.sh
#
# Option 2: Per-source hook scripts (item.hook_pre_script, item.hook_post_script)
#   - Copies specific hook script per source
#
# Option 3: Manual hook management
#   - User manually creates hooks on target hosts in restic_hooks_dir
#
# Note: Hooks are optional. If not present, backup runs without hooks.

- name: "Deploy {{ hook_type }} hooks for all sources"
  loop:
    - pre
    - post
  loop_control:
    loop_var: hook_type
    label: "{{ hook_type }} hooks"
  block:
    - name: "Copy {{ hook_type }}-backup hooks from custom directory"
      ansible.builtin.copy:
        src: "{{ restic_custom_hooks_dir }}/{{ hook_type }}-backup-{{ item.name }}.sh"
        dest: "{{ item.hook_script_dir | default(restic_hooks_dir) }}/{{ hook_type }}-backup-{{ item.name }}.sh"
        mode: '0755'
        owner: root
        group: root
      loop: "{{ restic_backup_sources | selectattr('enabled') | list }}"
      loop_control:
        label: "{{ hook_type }}-{{ item.name }}"
      when:
        - restic_custom_hooks_dir | length > 0
        - (hook_type == 'pre' and item.hook_pre_script is not defined) or
          (hook_type == 'post' and item.hook_post_script is not defined)
      ignore_errors: yes  # Hook might not exist for this source

    - name: "Copy {{ hook_type }}-backup per-source hook scripts"
      ansible.builtin.copy:
        src: "{{ item['hook_' + hook_type + '_script'] }}"
        dest: "{{ item.hook_script_dir | default(restic_hooks_dir) }}/{{ hook_type }}-backup-{{ item.name }}.sh"
        mode: '0755'
        owner: root
        group: root
      loop: "{{ restic_backup_sources | selectattr('enabled') | list }}"
      loop_control:
        label: "{{ hook_type }}-{{ item.name }}"
      when:
        - item['hook_' + hook_type + '_script'] is defined
        - item['hook_' + hook_type + '_script'] | length > 0
