---
# roles/restic/defaults/main.yml
# Default variables for restic role
# All variables are prefixed with 'restic_' for namespace isolation

# ========================================
# ENCRYPTION
# ========================================

# Repository password - CRITICAL: Without this, backups are LOST!
# Store in vault (group_vars/all/vault.yml encrypted with ansible-vault)
restic_password: "{{ vault_restic_password | default('') }}"

# Password file location on target system
restic_password_file: "repository.key"

# ========================================
# BACKEND CONFIGURATION
# ========================================

restic_backend_type: "s3"  # s3, local, sftp

# S3 Backend (configure in group_vars or playbook)
restic_s3_bucket: ""  # Example: "my-backup-bucket"
restic_s3_region: ""  # Example: "eu-central-1"
restic_s3_access_key: "{{ vault_s3_access_key | default('') }}"
restic_s3_secret_key: "{{ vault_s3_secret_key | default('') }}"
restic_s3_endpoint: ""  # Empty for AWS, or custom endpoint (MinIO, Wasabi, etc.)
restic_s3_prefix: ""  # Optional path prefix in bucket, e.g. "restic"

# Local Backend (configure in group_vars or playbook)
restic_local_path: ""  # Example: "/mnt/backup/restic-repo"

# SFTP Backend (configure in group_vars or playbook)
restic_sftp_host: ""
restic_sftp_user: ""
restic_sftp_path: ""

# Repository URL (will be constructed automatically)
restic_repository: ""

# ========================================
# BACKUP SOURCES
# ========================================

# Define backup sources in group_vars or playbook
# Empty by default - role is generic and requires configuration
restic_backup_sources: []

# Example configuration:
# restic_backup_sources:
#   - name: "var-www"
#     path: "/var/www"
#     tags: ["web", "production"]
#     enabled: true
#     # Optional per-source settings:
#     # timeout_seconds: 7200  # Override default backup timeout
#     # retry_lock_duration: "5m"  # Override default retry-lock duration
#     # hook_pre_script: "{{ playbook_dir }}/hooks/pre-backup-var-www.sh"
#     # hook_post_script: "{{ playbook_dir }}/hooks/post-backup-var-www.sh"
#     # hook_script_dir: "/etc/restic/hooks"  # Override default hooks directory
#
#   - name: "etc"
#     path: "/etc"
#     tags: ["config", "system"]
#     enabled: true
#
#   - name: "home"
#     path: "/home"
#     tags: ["userdata"]
#     enabled: false

# ========================================
# EXCLUSIONS
# ========================================

restic_backup_excludes:
  - "*.tmp"
  - "*.cache"
  - "*.log"
  - "*/cache/*"
  - "*/tmp/*"
  - "*/node_modules/*"
  - "*/vendor/*"
  - "*/.git/*"
  - "*/lost+found/*"
  - "*.pyc"
  - "__pycache__"
  - "*.swp"
  - "*.swo"
  - "*~"

# ========================================
# BACKUP BEHAVIOR
# ========================================

# Force re-scan of all files (ignores change detection)
restic_force_rescan: false

# Optional: Force rescan on specific day of month (1-31, 0=disabled)
restic_force_rescan_day: 0

# ========================================
# SYSTEMD TIMER CONFIGURATION
# ========================================

# Backup timer settings
restic_timer_on_calendar: "daily"  # Examples: "daily", "weekly", "Mon,Wed,Fri *-*-* 02:00:00", "hourly"
restic_timer_persistent: true
restic_timer_randomized_delay: "30min"
restic_timer_accuracy: "1h"

# Prune timer settings
restic_prune_timer_on_calendar: "weekly"

# Check timer settings
restic_check_timer_on_calendar: "weekly"
restic_check_read_data: false  # Set to true for full data integrity check (slower)
restic_check_read_data_subset: ""  # Example: "1/12" (check 1/12 of data), "10%" (10% random), "50M" (50 MiB)

# Scan timer settings
restic_scan_timer_on_calendar: "daily"

# ========================================
# PERFORMANCE & LIMITS
# ========================================

# Read concurrency (parallel file reading)
restic_read_concurrency: 2

# Upload/Download limits in KiB/s (0 = unlimited)
restic_upload_limit_kbps: 0
restic_download_limit_kbps: 0

# CPU and I/O limits for systemd units
restic_cpu_quota: 80  # Percentage (100 = 1 core)
restic_io_weight: 100  # 1-10000, default 100
restic_nice_level: 10  # -20 to 19, higher = lower priority

# Backup timeout (0 = unlimited, systemd default)
restic_backup_timeout_seconds: 0  # Override per source with timeout_seconds

# Retry lock duration (wait if repository is locked)
restic_retry_lock_duration: "5m"  # Override per source with retry_lock_duration

# Exit code 3 handling (incomplete backup - some files couldn't be read)
# When true, exit code 3 is treated as success (warning logged)
# When false, exit code 3 is treated as failure
restic_allow_incomplete_backup: true

# ========================================
# RETENTION POLICY
# ========================================

restic_retention_keep_last: 7
restic_retention_keep_hourly: 24
restic_retention_keep_daily: 14
restic_retention_keep_weekly: 8
restic_retention_keep_monthly: 12
restic_retention_keep_yearly: 5

# ========================================
# RESTIC LOCK MANAGEMENT
# ========================================

# Maximum age of locks before cleanup (stale lock detection)
# If a lock is older than this threshold, it's considered stale (likely from a crash)
# and will be removed via 'restic unlock' in ExecStartPre
#
# Note: Restic's 'restic unlock' command removes locks older than 30 minutes (hardcoded)
# This variable controls WHEN we call 'restic unlock', not what it removes
#
# Locks younger than this threshold are handled by --retry-lock
restic_lock_max_age_hours: 12  # Threshold for stale lock detection

# Retry configuration for failed operations
# Services will retry on failure (e.g., when repository is locked)
# RestartSec: Wait time between retry attempts
restic_restart_sec: "15min"  # Wait 15 minutes before retry

# Maximum number of restart attempts (0 = infinite)
restic_restart_max_attempts: 0  # Keep trying until lock is released

# ========================================
# DIRECTORIES
# ========================================

# Configuration directory
restic_config_dir: "/etc/restic"

# Scripts directory
restic_scripts_dir: "/usr/local/bin/restic"

# Hooks directory (can be overridden per source)
restic_hooks_dir: "/etc/restic/hooks"

# Helper scripts directory for admin tools (restore, stats, etc.)
restic_helpers_dir: "/opt/restic"

# ========================================
# HOOKS
# ========================================

# Custom hooks directory on control node
# Hooks must be created manually in this directory or on target hosts
# Example: restic_custom_hooks_dir: "{{ playbook_dir }}/hooks"
# Hook naming: pre-backup-<source-name>.sh, post-backup-<source-name>.sh
# Or use per-source hook_pre_script and hook_post_script variables
restic_custom_hooks_dir: ""

# ========================================
# MONITORING
# ========================================

# Syslog
restic_enable_syslog: true
restic_syslog_facility: "local0"
restic_syslog_tag: "restic"

# CheckMK monitoring
restic_enable_checkmk: true
restic_checkmk_spool_dir: "/var/lib/check_mk_agent/spool"
restic_checkmk_service_prefix: "Restic"

# ========================================
# SYSTEMD UNITS
# ========================================

# Enable/disable specific job types
restic_enable_backup: true
restic_enable_prune: true
restic_enable_check: true
restic_enable_scan: true

# Enable/disable timers (vs manual execution)
restic_enable_timers: true

# ========================================
# INSTALLATION
# ========================================

# Restic package name
restic_package_name: "restic"

# Additional packages (required for helper scripts)
restic_additional_packages:
  - "jq"  # Required: JSON parsing in restic-scan.sh and restic-repo-info.sh
  - "bc"  # Required: Byte-to-GB conversion in restic-scan.sh

# ========================================
# DEBUG MODE
# ========================================

# WARNING: ONLY enable for testing/debugging!
# When enabled, sensitive data (passwords, keys) may be visible in logs!
# NEVER use in production!
restic_debug_mode: false
