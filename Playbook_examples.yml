---
# ========================================
# Example 1: Simple Backup to S3
# ========================================

- name: Simple Backup to S3
  hosts: webservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "company-backups"
        restic_s3_region: "eu-central-1"
        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

---
# ========================================
# Example 2: With Custom Hooks from Playbook Directory
# ========================================

- name: Backup with Custom Hooks
  hosts: dbservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "db-backups"

        restic_backup_sources:
          - name: "database"
            path: "/var/lib/postgresql"
            tags: ["database", "postgres"]
            enabled: true

        # Use custom hook scripts from playbook directory
        # Create hooks/pre-backup-database.sh and hooks/post-backup-database.sh
        restic_custom_hooks_dir: "{{ playbook_dir }}/hooks"

---
# ========================================
# Example 3: With Per-Source Hook Scripts
# ========================================

- name: Backup with Per-Source Hooks
  hosts: mysql_servers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "mysql-backups"

        restic_backup_sources:
          - name: "mysql"
            path: "/var/backups/mysql"
            tags: ["database", "mysql"]
            enabled: true
            # Specify custom hook scripts for this source
            hook_pre_script: "{{ playbook_dir }}/scripts/mysql-pre-backup.sh"
            hook_post_script: "{{ playbook_dir }}/scripts/mysql-post-backup.sh"

---
# ========================================
# Example 4: Local Backup to NFS
# ========================================

- name: Backup to NFS Mount
  hosts: appservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "local"
        restic_local_path: "/mnt/nfs-backup/restic"

        restic_backup_sources:
          - name: "myapp"
            path: "/opt/myapp"
            tags: ["application"]
            enabled: true

---
# ========================================
# Example 5: Minimal Configuration
# ========================================

- name: Minimal Backup
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "minimal-backup"
        restic_backup_sources:
          - name: "etc"
            path: "/etc"
            tags: ["config"]
            enabled: true

---
# ========================================
# Example 6: Multi-Environment with 2-Key Encryption
# ========================================

- name: Production Backup (Playbook-Specific Key)
  hosts: production
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "prod-backups"
        restic_use_playbook_key: true  # Use playbook-specific encryption

        # Systemd timer configuration
        restic_timer_on_calendar: "02:00"  # 2am daily
        restic_timer_randomized_delay: "30min"

        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web", "production"]
            enabled: true

- name: Staging Backup (Generic Key)
  hosts: staging
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "staging-backups"
        restic_use_playbook_key: false  # Use generic key for shared access

        restic_timer_on_calendar: "04:00"

---
# ========================================
# Example 7: With Service Stop/Start Hooks
# ========================================

- name: Backup with Service Management
  hosts: appservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "app-backups"

        restic_backup_sources:
          - name: "appdata"
            path: "/var/lib/myapp"
            tags: ["application"]
            enabled: true
            # Use hook scripts that stop/start services
            # See hooks/pre-backup-example.sh for service management examples
            hook_pre_script: "{{ playbook_dir }}/hooks/pre-backup-appdata.sh"
            hook_post_script: "{{ playbook_dir }}/hooks/post-backup-appdata.sh"

---
# ========================================
# Example 8: Multiple Sources with Different Schedules
# ========================================

- name: Frequent Backup for Critical Data
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "multi-schedule-backups"

        # Fast backups run more frequently
        restic_timer_on_calendar: "hourly"

        restic_backup_sources:
          - name: "critical-db"
            path: "/var/lib/mysql"
            tags: ["critical", "database"]
            enabled: true

          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

          - name: "etc"
            path: "/etc"
            tags: ["config"]
            enabled: true

---
# ========================================
# Example 9: Custom Retention Policy
# ========================================

- name: Backup with Long-term Retention
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "long-term-backups"

        restic_backup_sources:
          - name: "archives"
            path: "/var/archives"
            tags: ["archives"]
            enabled: true

        # Keep more snapshots for long-term storage
        restic_retention_keep_last: 14
        restic_retention_keep_hourly: 48
        restic_retention_keep_daily: 30
        restic_retention_keep_weekly: 12
        restic_retention_keep_monthly: 24
        restic_retention_keep_yearly: 10

---
# ========================================
# Example 10: MinIO Backend
# ========================================

- name: Backup to MinIO
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "restic-backups"
        restic_s3_region: "us-east-1"
        restic_s3_endpoint: "https://minio.example.com"

        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

---
# ========================================
# Example 11: Wasabi Cloud Storage
# ========================================

- name: Backup to Wasabi
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "my-wasabi-bucket"
        restic_s3_region: "eu-central-1"
        restic_s3_endpoint: "https://s3.eu-central-1.wasabisys.com"

        restic_backup_sources:
          - name: "data"
            path: "/var/data"
            tags: ["data"]
            enabled: true

---
# ========================================
# Example 12: Per-Source Custom Hook Directory
# ========================================

- name: Backup with Per-Source Hooks
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "custom-hooks-backup"

        restic_backup_sources:
          - name: "database"
            path: "/var/lib/postgresql"
            tags: ["database"]
            enabled: true
            # Override hook directory for this source only
            hook_script_dir: "/opt/custom-hooks"

          - name: "files"
            path: "/var/files"
            tags: ["files"]
            enabled: true
            # Uses default restic_hooks_dir

---
# ========================================
# Example 13: Manual Hook Management
# ========================================

- name: Backup with Manual Hooks
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "manual-hooks-backup"

        # No hook configuration - user manually creates hooks on target hosts
        # Create hooks in /etc/restic/hooks/ on each target:
        #   /etc/restic/hooks/pre-backup-custom.sh
        #   /etc/restic/hooks/post-backup-custom.sh

        restic_backup_sources:
          - name: "custom"
            path: "/var/custom"
            tags: ["custom"]
            enabled: true

---
# ========================================
# Example 14: Resource-Limited Backup
# ========================================

- name: Low-Priority Backup
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "low-priority-backup"

        # Limit resources to avoid impacting production
        restic_cpu_quota: 50          # Max 50% CPU
        restic_io_weight: 50          # Lower I/O priority
        restic_nice_level: 19         # Lowest CPU priority
        restic_upload_limit_kbps: 10240  # Max 10 MB/s upload

        restic_backup_sources:
          - name: "logs"
            path: "/var/log"
            tags: ["logs"]
            enabled: true

---
# ========================================
# Example 15: Group-Based Configuration
# ========================================
# All configuration loaded from group_vars

- name: Backup with Group Variables
  hosts: all
  become: yes

  roles:
    - restic
    # Configuration loaded from:
    # - group_vars/all/vars.yml
    # - group_vars/webservers/vars.yml
    # - group_vars/dbservers/vars.yml
    # - group_vars/all/vault.yml (encrypted)

---
# ========================================
# Example 16: Advanced Lock Management & Retry Configuration
# ========================================

- name: Advanced Lock Management
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "advanced-lock-config"

        # Global lock and retry settings
        restic_lock_max_age_hours: 12        # Stale lock threshold (crash detection)
        restic_retry_lock_duration: "5m"     # Default retry-lock for backups
        restic_restart_sec: "15min"          # Wait between systemd retries
        restic_restart_max_attempts: 0       # Unlimited retries (0 = infinite)

        # Repository check configuration
        restic_check_read_data_subset: "1/12"  # Check 1/12 of data monthly

        restic_backup_sources:
          # Critical database - aggressive settings
          - name: "critical-db"
            path: "/var/lib/mysql"
            tags: ["critical", "database"]
            enabled: true
            lock_max_age_hours: 4              # More aggressive crash detection
            retry_lock_duration: "10m"         # Wait longer for locks
            timeout_seconds: 7200              # 2 hour timeout for large dumps

          # Large file storage - patient settings
          - name: "large-storage"
            path: "/mnt/storage"
            tags: ["storage", "files"]
            enabled: true
            lock_max_age_hours: 24             # Tolerant of long operations
            retry_lock_duration: "15m"         # Very patient
            timeout_seconds: 0                 # No timeout (unlimited)

          # Fast backup - standard settings
          - name: "etc"
            path: "/etc"
            tags: ["config"]
            enabled: true
            # Uses global defaults:
            # - lock_max_age_hours: 12
            # - retry_lock_duration: "5m"
            # - timeout_seconds: 0

---
# ========================================
# Example 17: Custom Timer Schedules
# ========================================

- name: Custom Backup Schedules
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "custom-schedules"

        # Backup runs daily at 2am with 30min randomization
        restic_timer_on_calendar: "02:00"
        restic_timer_randomized_delay: "30min"
        restic_timer_persistent: true          # Run after boot if missed
        restic_timer_accuracy: "1h"            # Allow up to 1h delay

        # Prune weekly on Sunday at 4am (when backups unlikely to run)
        restic_prune_timer_on_calendar: "Sun *-*-* 04:00:00"

        # Check weekly on Saturday at 3am
        restic_check_timer_on_calendar: "Sat *-*-* 03:00:00"

        # Scan daily at 5am
        restic_scan_timer_on_calendar: "daily"

        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

---
# ========================================
# Example 18: Multi-Repository Setup (Avoid Lock Conflicts)
# ========================================

- name: Separate Repositories per Source
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "multi-repo-backups"

        # Each source gets its own repository path to avoid lock conflicts
        # This allows true parallel backups
        restic_s3_prefix: "{{ inventory_hostname }}/{{ item.name }}"

        # All backups can run simultaneously at 2am
        restic_timer_on_calendar: "02:00"

        restic_backup_sources:
          - name: "database"
            path: "/var/lib/mysql"
            tags: ["database"]
            enabled: true
            # Repository: s3:bucket/hostname/database

          - name: "www"
            path: "/var/www"
            tags: ["web"]
            enabled: true
            # Repository: s3:bucket/hostname/www

          - name: "files"
            path: "/mnt/files"
            tags: ["files"]
            enabled: true
            # Repository: s3:bucket/hostname/files

        # Note: Each source has independent locks = no conflicts!

---
# ========================================
# Example 19: Bandwidth-Limited Backup
# ========================================

- name: Bandwidth-Limited Backup
  hosts: remote_sites
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "bandwidth-limited"

        # Limit upload/download to avoid saturating connection
        restic_upload_limit_kbps: 5120       # Max 5 MB/s upload
        restic_download_limit_kbps: 10240    # Max 10 MB/s download

        # Lower priority to avoid impacting production
        restic_cpu_quota: 50                 # Max 50% CPU
        restic_io_weight: 50                 # Lower I/O priority
        restic_nice_level: 19                # Lowest CPU scheduling priority

        restic_backup_sources:
          - name: "data"
            path: "/var/data"
            tags: ["data"]
            enabled: true
