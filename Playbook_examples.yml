---
# ========================================
# Example 1: Simple Backup to S3
# ========================================

- name: Simple Backup to S3
  hosts: webservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "company-backups"
        restic_s3_region: "eu-central-1"
        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

---
# ========================================
# Example 2: With Custom Hooks from Playbook Directory
# ========================================

- name: Backup with Custom Hooks
  hosts: dbservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "db-backups"

        restic_backup_sources:
          - name: "database"
            path: "/var/lib/postgresql"
            tags: ["database", "postgres"]
            enabled: true

        # Use custom hook scripts from playbook directory
        # Create hooks/pre-backup-database.sh and hooks/post-backup-database.sh
        restic_custom_hooks_dir: "{{ playbook_dir }}/hooks"

---
# ========================================
# Example 3: With Inline Hook Configuration
# ========================================

- name: Backup with Inline Hooks
  hosts: mysql_servers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "mysql-backups"

        restic_backup_sources:
          - name: "mysql"
            path: "/var/backups/mysql"
            tags: ["database", "mysql"]
            enabled: true
            # Pre-backup: dump database
            pre_backup_commands:
              - "mysqldump --all-databases > /var/backups/mysql/dump.sql"
            # Post-backup: cleanup dump
            post_backup_commands:
              - "rm -f /var/backups/mysql/dump.sql"
            # Optional: database dump helper
            database_dump:
              enabled: true
              type: "mysql"

---
# ========================================
# Example 4: Local Backup to NFS
# ========================================

- name: Backup to NFS Mount
  hosts: appservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "local"
        restic_local_path: "/mnt/nfs-backup/restic"

        restic_backup_sources:
          - name: "myapp"
            path: "/opt/myapp"
            tags: ["application"]
            enabled: true

---
# ========================================
# Example 5: Minimal Configuration
# ========================================

- name: Minimal Backup
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "minimal-backup"
        restic_backup_sources:
          - name: "etc"
            path: "/etc"
            tags: ["config"]
            enabled: true

---
# ========================================
# Example 6: Multi-Environment with 2-Key Encryption
# ========================================

- name: Production Backup (Playbook-Specific Key)
  hosts: production
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "prod-backups"
        restic_use_playbook_key: true  # Use playbook-specific encryption

        # Systemd timer configuration
        restic_timer_on_calendar: "02:00"  # 2am daily
        restic_timer_randomized_delay: "30min"

        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web", "production"]
            enabled: true

- name: Staging Backup (Generic Key)
  hosts: staging
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "staging-backups"
        restic_use_playbook_key: false  # Use generic key for shared access

        restic_timer_on_calendar: "04:00"

---
# ========================================
# Example 7: With Service Stop/Start Hooks
# ========================================

- name: Backup with Service Management
  hosts: appservers
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "app-backups"

        restic_backup_sources:
          - name: "appdata"
            path: "/var/lib/myapp"
            tags: ["application"]
            enabled: true
            # Stop services before backup
            stop_services:
              - myapp
              - nginx
            # Start services after backup
            start_services:
              - myapp
              - nginx

---
# ========================================
# Example 8: Multiple Sources with Different Schedules
# ========================================

- name: Frequent Backup for Critical Data
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "multi-schedule-backups"

        # Fast backups run more frequently
        restic_timer_on_calendar: "hourly"

        restic_backup_sources:
          - name: "critical-db"
            path: "/var/lib/mysql"
            tags: ["critical", "database"]
            enabled: true

          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

          - name: "etc"
            path: "/etc"
            tags: ["config"]
            enabled: true

---
# ========================================
# Example 9: Custom Retention Policy
# ========================================

- name: Backup with Long-term Retention
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "long-term-backups"

        restic_backup_sources:
          - name: "archives"
            path: "/var/archives"
            tags: ["archives"]
            enabled: true

        # Keep more snapshots for long-term storage
        restic_retention_keep_last: 14
        restic_retention_keep_hourly: 48
        restic_retention_keep_daily: 30
        restic_retention_keep_weekly: 12
        restic_retention_keep_monthly: 24
        restic_retention_keep_yearly: 10

---
# ========================================
# Example 10: MinIO Backend
# ========================================

- name: Backup to MinIO
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "restic-backups"
        restic_s3_region: "us-east-1"
        restic_s3_endpoint: "https://minio.example.com"

        restic_backup_sources:
          - name: "var-www"
            path: "/var/www"
            tags: ["web"]
            enabled: true

---
# ========================================
# Example 11: Wasabi Cloud Storage
# ========================================

- name: Backup to Wasabi
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_backend_type: "s3"
        restic_s3_bucket: "my-wasabi-bucket"
        restic_s3_region: "eu-central-1"
        restic_s3_endpoint: "https://s3.eu-central-1.wasabisys.com"

        restic_backup_sources:
          - name: "data"
            path: "/var/data"
            tags: ["data"]
            enabled: true

---
# ========================================
# Example 12: Per-Source Custom Hook Directory
# ========================================

- name: Backup with Per-Source Hooks
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "custom-hooks-backup"

        restic_backup_sources:
          - name: "database"
            path: "/var/lib/postgresql"
            tags: ["database"]
            enabled: true
            # Override hook directory for this source only
            hook_script_dir: "/opt/custom-hooks"

          - name: "files"
            path: "/var/files"
            tags: ["files"]
            enabled: true
            # Uses default restic_hooks_dir

---
# ========================================
# Example 13: Disable Default Hooks (Manual Hook Management)
# ========================================

- name: Backup with Manual Hooks
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "manual-hooks-backup"

        # Don't deploy default hook templates
        # User manually creates hooks in /etc/restic/hooks/
        restic_deploy_default_hooks: false

        restic_backup_sources:
          - name: "custom"
            path: "/var/custom"
            tags: ["custom"]
            enabled: true

---
# ========================================
# Example 14: Resource-Limited Backup
# ========================================

- name: Low-Priority Backup
  hosts: all
  become: yes

  roles:
    - role: restic
      vars:
        restic_s3_bucket: "low-priority-backup"

        # Limit resources to avoid impacting production
        restic_cpu_quota: 50          # Max 50% CPU
        restic_io_weight: 50          # Lower I/O priority
        restic_nice_level: 19         # Lowest CPU priority
        restic_upload_limit_kbps: 10240  # Max 10 MB/s upload

        restic_backup_sources:
          - name: "logs"
            path: "/var/log"
            tags: ["logs"]
            enabled: true

---
# ========================================
# Example 15: Group-Based Configuration
# ========================================
# All configuration loaded from group_vars

- name: Backup with Group Variables
  hosts: all
  become: yes

  roles:
    - restic
    # Configuration loaded from:
    # - group_vars/all/vars.yml
    # - group_vars/webservers/vars.yml
    # - group_vars/dbservers/vars.yml
    # - group_vars/all/vault.yml (encrypted)
