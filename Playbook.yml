---
# playbook.yml
# ========================================
# Restic Backup Playbook
# ========================================

- name: Backup Servers
  hosts: all
  become: yes
  
  roles:
    - restic_backup

# ========================================
# CONFIGURATION
# ========================================
# 
# Configure the role in:
# - group_vars/all/vars.yml         (General settings)
# - group_vars/all/vault.yml        (Encrypted secrets)
# - inventory/hosts.ini             (Server list)
# - group_vars/<group>/vars.yml     (Group-specific)
#
# ========================================
# PRE/POST BACKUP TASKS
# ========================================
#
# Pre/Post tasks are executed via external files:
# 
# - hosts: all
#   become: yes
#   roles:
#     - role: restic_backup
#       vars:
#         pre_backup_tasks_file: "{{ playbook_dir }}/tasks/pre_backup.yml"
#         post_backup_tasks_file: "{{ playbook_dir }}/tasks/post_backup.yml"
#
# ========================================
# EXECUTION
# ========================================
#
# Manual execution with vault password prompt:
#   ansible-playbook playbook.yml --ask-vault-pass
#
# Manual execution with vault password file:
#   ansible-playbook playbook.yml --vault-password-file ~/.vault_pass
#
# Syntax check:
#   ansible-playbook playbook.yml --syntax-check
#
# Dry-run:
#   ansible-playbook playbook.yml --check --ask-vault-pass
#
# ========================================
# AUTOMATIC EXECUTION (SCHEDULER REQUIRED)
# ========================================
#
# IMPORTANT: This playbook does NOT run automatically!
# You MUST set up a scheduler (cron or systemd timer) to run it.
#
# The role checks backup_interval_hours to determine if a backup is due.
# If NOT due: Playbook exits immediately (~2 seconds)
# If due: Backup is performed
#
# Example Cron (runs every 5 minutes, backups only when due):
#   */5 * * * * /usr/bin/ansible-playbook /path/to/playbook.yml --vault-password-file /root/.vault_pass
#
# Example Systemd Timer (see documentation for full setup):
#   [Unit]
#   Description=Restic Backup Timer
#   
#   [Timer]
#   OnCalendar=*:0/5
#   Persistent=true
#   
#   [Install]
#   WantedBy=timers.target
#
# ========================================
# MONITORING
# ========================================
#
# Check_MK integration (automatic):
#   enable_checkmk: true
#   checkmk_service_name: "Restic_Backup"
#
# Logs:
#   /var/log/restic/backup-YYYY-MM-DD.log
#
# Last backup:
#   cat /root/.restic/last_backup_timestamp
#   date -d @$(cat /root/.restic/last_backup_timestamp)